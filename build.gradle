plugins {
    id 'net.minecraftforge.gradle' version '6.0+'
    id 'com.matthewprenger.cursegradle' version '1.2.0'
    id "com.modrinth.minotaur" version "2.+"
    id 'idea'
    id 'eclipse'
    id 'org.spongepowered.mixin' version '0.7.+'
}

mixin {
    add sourceSets.main, "fallingleaves.refmap.json"
}

ext.mod_version="Test"
ext.type="test"
ext.classification = "test"

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

apply from: 'gradle/versioning.gradle'
apply from: 'gradle/artifacts.gradle'
apply from: 'gradle/deploy.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'mixin.debug.export', 'true'
            arg "-mixin.config=fallingleaves.mixins.json"
        }

        client2 {
            parent runs.client
            taskName 'runClient2'
            args "-mixin.config=fallingleaves.mixins.json", '--username', 'Dev2'
        }

        server {
            arg "-mixin.config=fallingleaves.mixins.json"
        }

        data {
            args "-mixin.config=fallingleaves.mixins.json", '--mod', project.mod_id , '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }
    //Serene Seasons API
//    compileOnly fg.deobf("curse.maven:serene-seasons-api-291874:3582838")
    //Serene Seasons Full for testing
//    runtimeOnly fg.deobf("curse.maven:serene-seasons-291874:3582836")
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "fallingleaves.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version         : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
            mod_issue_tracker_url: mod_issue_tracker_url, mod_credits: mod_credits
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}